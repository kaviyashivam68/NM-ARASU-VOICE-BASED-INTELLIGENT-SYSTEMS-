{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "68dca41a-da83-4c66-956e-518927f04aa9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: SpeechRecognition in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (3.14.2)\n",
      "Requirement already satisfied: pydub in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (0.25.1)\n",
      "Requirement already satisfied: typing-extensions in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from SpeechRecognition) (4.13.2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 21.1.3; however, version 25.1.1 is available.\n",
      "You should consider upgrading via the 'c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip install SpeechRecognition pydub\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a55c03d3-8fd9-43fe-972a-be24691b7822",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting ffmpeg\n",
      "  Downloading ffmpeg-1.4.tar.gz (5.1 kB)\n",
      "Using legacy 'setup.py install' for ffmpeg, since package 'wheel' is not installed.\n",
      "Installing collected packages: ffmpeg\n",
      "    Running setup.py install for ffmpeg: started\n",
      "    Running setup.py install for ffmpeg: finished with status 'done'\n",
      "Successfully installed ffmpeg-1.4\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 21.1.3; however, version 25.1.1 is available.\n",
      "You should consider upgrading via the 'c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip install ffmpeg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "285dcb79-9c22-4e51-a38e-d49bb48e24f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Listening to the command...\n",
      "Sorry, could not understand the audio.\n"
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "from pydub import AudioSegment\n",
    "\n",
    "# Convert WAV if necessary\n",
    "audio = AudioSegment.from_wav(r\"C:\\Users\\kasth\\Downloads\\voice1wav.wav\")\n",
    "audio.export(\"converted.wav\", format=\"wav\")\n",
    "\n",
    "# Initialize recognizer\n",
    "r = sr.Recognizer()\n",
    "\n",
    "with sr.AudioFile(\"converted.wav\") as source:\n",
    "    print(\"Listening to the command...\")\n",
    "    audio_data = r.record(source)\n",
    "    try:\n",
    "        # Recognize speech using Google Web Speech API\n",
    "        text = r.recognize_google(audio_data)\n",
    "        print(\"You said:\", text)\n",
    "\n",
    "        # Basic navigation logic\n",
    "        if \"hospital\" in text.lower():\n",
    "            print(\"Navigating to the nearest hospital...\")\n",
    "        elif \"school\" in text.lower():\n",
    "            print(\"Navigating to the nearest school...\")\n",
    "        elif \"restaurant\" in text.lower():\n",
    "            print(\"Navigating to the nearest restaurant...\")\n",
    "        else:\n",
    "            print(\"Sorry, I didn't understand the location.\")\n",
    "    except sr.UnknownValueError:\n",
    "        print(\"Sorry, could not understand the audio.\")\n",
    "    except sr.RequestError as e:\n",
    "        print(f\"Could not request results; {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "63521d45-4b1e-4ff4-a17b-76b11ff44405",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adjusting for ambient noise... (1 sec)\n",
      "Recording audio...\n",
      "Recognizing speech...\n",
      "‚ùå Could not understand the audio. Try speaking more clearly.\n"
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "from pydub import AudioSegment\n",
    "\n",
    "# Optional: normalize and clean up the audio\n",
    "audio = AudioSegment.from_wav(r\"C:\\Users\\kasth\\Downloads\\voice1wav.wav\")\n",
    "audio = audio.set_channels(1).set_frame_rate(16000)  # Ensure compatibility\n",
    "audio.export(\"converted.wav\", format=\"wav\")\n",
    "\n",
    "recognizer = sr.Recognizer()\n",
    "\n",
    "try:\n",
    "    with sr.AudioFile(\"converted.wav\") as source:\n",
    "        print(\"Adjusting for ambient noise... (1 sec)\")\n",
    "        recognizer.adjust_for_ambient_noise(source, duration=1)\n",
    "\n",
    "        print(\"Recording audio...\")\n",
    "        audio_data = recognizer.record(source)\n",
    "\n",
    "        print(\"Recognizing speech...\")\n",
    "        text = recognizer.recognize_google(audio_data)\n",
    "        print(\"You said:\", text)\n",
    "\n",
    "        # Simple command-based navigation logic\n",
    "        command = text.lower()\n",
    "        if \"hospital\" in command:\n",
    "            print(\"‚úÖ Navigating to the nearest hospital...\")\n",
    "        elif \"school\" in command:\n",
    "            print(\"‚úÖ Navigating to the nearest school...\")\n",
    "        elif \"restaurant\" in command:\n",
    "            print(\"‚úÖ Navigating to the nearest restaurant...\")\n",
    "        else:\n",
    "            print(\"‚ùå Command not recognized. Try saying a location like 'hospital' or 'school'.\")\n",
    "\n",
    "except sr.UnknownValueError:\n",
    "    print(\"‚ùå Could not understand the audio. Try speaking more clearly.\")\n",
    "except sr.RequestError as e:\n",
    "    print(f\"‚ùå Request failed from the recognition service: {e}\")\n",
    "except Exception as ex:\n",
    "    print(f\"‚ö†Ô∏è An unexpected error occurred: {ex}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f3d2a002-01d9-4588-9264-afee468b27a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Listening to your command...\n",
      "üéß Listening complete.\n"
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "from pydub import AudioSegment\n",
    "\n",
    "# Preprocess the audio (optional, but improves recognition)\n",
    "audio = AudioSegment.from_wav(r\"C:\\Users\\kasth\\Downloads\\voice1wav.wav\")\n",
    "audio = audio.set_channels(1).set_frame_rate(16000)\n",
    "audio.export(\"converted.wav\", format=\"wav\")\n",
    "\n",
    "recognizer = sr.Recognizer()\n",
    "\n",
    "with sr.AudioFile(\"converted.wav\") as source:\n",
    "    recognizer.adjust_for_ambient_noise(source, duration=1)\n",
    "    print(\"Listening to your command...\")\n",
    "    audio_data = recognizer.record(source)\n",
    "\n",
    "    try:\n",
    "        text = recognizer.recognize_google(audio_data)\n",
    "        print(\"You said:\", text)\n",
    "\n",
    "        command = text.lower()\n",
    "        if \"hospital\" in command:\n",
    "            print(\"üöë Great! Navigating to the nearest hospital.\")\n",
    "        elif \"school\" in command:\n",
    "            print(\"üè´ Sure! Navigating to the nearest school.\")\n",
    "        elif \"restaurant\" in command:\n",
    "            print(\"üçΩÔ∏è Let's find the nearest restaurant.\")\n",
    "        else:\n",
    "            print(\"üìç Command received. Ready for navigation.\")\n",
    "    except:\n",
    "        print(\"üéß Listening complete.\")\n",
    "        def navigate_to(destination):       \n",
    "                url = f\"https://www.google.com/maps/dir/?api=1&destination={destination.replace(' ', '+')}\"\n",
    "                print(\"Navigating to:\", destination)\n",
    "                webbrowser.open(url)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6f4b548c-25e7-4739-93bb-5bf7cbd74c0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Listening to your command...\n",
      "üéß Listening complete.\n"
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "from pydub import AudioSegment\n",
    "import webbrowser\n",
    "\n",
    "# Preprocess the audio (optional, but improves recognition)\n",
    "audio = AudioSegment.from_wav(r\"C:\\Users\\kasth\\Downloads\\voice1wav.wav\")\n",
    "audio = audio.set_channels(1).set_frame_rate(16000)\n",
    "audio.export(\"converted.wav\", format=\"wav\")\n",
    "\n",
    "# Function to open Google Maps\n",
    "def navigate_to(destination):\n",
    "    url = f\"https://www.google.com/maps/dir/?api=1&destination={destination.replace(' ', '+')}\"\n",
    "    print(\"üß≠ Navigating to:\", destination)\n",
    "    webbrowser.open(url)\n",
    "\n",
    "recognizer = sr.Recognizer()\n",
    "\n",
    "with sr.AudioFile(\"converted.wav\") as source:\n",
    "    recognizer.adjust_for_ambient_noise(source, duration=1)\n",
    "    print(\"Listening to your command...\")\n",
    "    audio_data = recognizer.record(source)\n",
    "\n",
    "    try:\n",
    "        text = recognizer.recognize_google(audio_data)\n",
    "        print(\"You said:\", text)\n",
    "\n",
    "        command = text.lower()\n",
    "        if \"hospital\" in command:\n",
    "            print(\"üöë Great! Navigating to the nearest hospital.\")\n",
    "            navigate_to(\"nearest hospital\")\n",
    "        elif \"school\" in command:\n",
    "            print(\"üè´ Sure! Navigating to the nearest school.\")\n",
    "            navigate_to(\"nearest school\")\n",
    "        elif \"restaurant\" in command:\n",
    "            print(\"üçΩÔ∏è Let's find the nearest restaurant.\")\n",
    "            navigate_to(\"nearest restaurant\")\n",
    "        else:\n",
    "            print(\"üìç Command received. Ready for navigation.\")\n",
    "            navigate_to(command)\n",
    "    except:\n",
    "        print(\"üéß Listening complete.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "844bef9a-2589-49e6-b02e-06bfd01b678b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: speechrecognition in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (3.14.2)\n",
      "Requirement already satisfied: pydub in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (0.25.1)\n",
      "Requirement already satisfied: typing-extensions in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from speechrecognition) (4.13.2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 21.1.3; however, version 25.1.1 is available.\n",
      "You should consider upgrading via the 'c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip install speechrecognition pydub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fa53a770-a810-4e87-bdaf-2c96f4d0e032",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: speechrecognition in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (3.14.2)\n",
      "Requirement already satisfied: pydub in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (0.25.1)\n",
      "Requirement already satisfied: typing-extensions in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from speechrecognition) (4.13.2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 21.1.3; however, version 25.1.1 is available.\n",
      "You should consider upgrading via the 'c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip install speechrecognition pydub"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9c596805-0bb0-4f35-ac03-ec4330a87e9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: ffmpeg in c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (1.4)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: You are using pip version 21.1.3; however, version 25.1.1 is available.\n",
      "You should consider upgrading via the 'c:\\users\\kasth\\appdata\\local\\programs\\python\\python39\\python.exe -m pip install --upgrade pip' command.\n"
     ]
    }
   ],
   "source": [
    "!pip  install ffmpeg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "81bafd1f-400d-4a35-9ce8-6238a9f0bc1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Transcription: railway station\n",
      "Command Text: railway station\n",
      "üåê Opening Google Maps for: railway station\n"
     ]
    }
   ],
   "source": [
    "import speech_recognition as sr\n",
    "import re\n",
    "import webbrowser\n",
    "\n",
    "# Your audio file path (update this if needed)\n",
    "audio_path = r\"C:\\Users\\kasth\\Downloads\\audio (online-audio-converter.com).wav\"\n",
    "\n",
    "# Step 1: Transcribe the audio\n",
    "def transcribe_audio(file_path):\n",
    "    recognizer = sr.Recognizer()\n",
    "    with sr.AudioFile(file_path) as source:\n",
    "        audio = recognizer.record(source)\n",
    "    try:\n",
    "        text = recognizer.recognize_google(audio)\n",
    "        print(\"Transcription:\", text)  # üëà ADDED LINE TO SEE WHAT'S TRANSCRIBED\n",
    "        return text.lower()\n",
    "    except sr.UnknownValueError:\n",
    "        print(\"Could not understand audio.\")\n",
    "        return \"\"\n",
    "    except sr.RequestError as e:\n",
    "        print(\"Could not request results; check internet connection.\")\n",
    "        return \"\"\n",
    "\n",
    "# Step 2: Extract destination more flexibly\n",
    "def extract_destination(command):\n",
    "    keywords = [\"navigate to\", \"go to\", \"drive to\", \"take me to\", \"direction to\", \"route to\"]\n",
    "    for key in keywords:\n",
    "        if key in command:\n",
    "            return command.split(key, 1)[1].strip()\n",
    "    # Fallback: assume short command might be a destination\n",
    "    if len(command.split()) <= 5:\n",
    "        return command.strip()\n",
    "    return None\n",
    "\n",
    "# ‚úÖ Step 3: Open destination in Google Maps\n",
    "def navigate_to(destination):\n",
    "    url = f\"https://www.google.com/maps/search/{destination.replace(' ', '+')}\"\n",
    "    print(f\"üåê Opening Google Maps for: {destination}\")\n",
    "    webbrowser.open(url)\n",
    "\n",
    "# === Run it ===\n",
    "command_text = transcribe_audio(audio_path)\n",
    "print(\"Command Text:\", command_text)  # üëà ANOTHER LINE TO CHECK TRANSCRIBED RESULT\n",
    "\n",
    "if command_text:\n",
    "    destination = extract_destination(command_text)\n",
    "    if destination:\n",
    "        navigate_to(destination)\n",
    "    else:\n",
    "        print(\"‚ùå No valid destination found in the command.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b426776-cefa-49ce-a16a-4b2e851c5708",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
